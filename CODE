package sdmcet.cse.oop;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class Final extends JFrame {
    private JLabel l1, l2, l3, l4, l5, l6,l7;
    private JTextField t1, t2, t3, t4, t5;
    private JButton b;

    public Final() {
        setTitle("Grade Calculator");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(300, 250);
        setLocationRelativeTo(null);

        initializeComponents();

        
        setLayout(new GridBagLayout());

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(5, 5, 5, 5);

        
        gbc.gridx = 0;
        gbc.gridy = 0;
        add(l1, gbc);

        gbc.gridx = 1;
        gbc.gridy = 0;
        add(t1, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        add(l2, gbc);

        gbc.gridx = 1;
        gbc.gridy = 1;
        add(t2, gbc);

        gbc.gridx = 0;
        gbc.gridy = 2;
        add(l3, gbc);

        gbc.gridx = 1;
        gbc.gridy = 2;
        add(t3, gbc);

        gbc.gridx = 0;
        gbc.gridy = 3;
        add(l4, gbc);

        gbc.gridx = 1;
        gbc.gridy = 3;
        add(t4, gbc);

        gbc.gridx = 0;
        gbc.gridy = 4;
        add(l5, gbc);

        gbc.gridx = 1;
        gbc.gridy = 4;
        add(t5, gbc);

        gbc.gridx = 1;
        gbc.gridy = 5;
        gbc.anchor = GridBagConstraints.CENTER;
        add(b, gbc);

        gbc.gridx = 1;
        gbc.gridy = 8;
        gbc.anchor = GridBagConstraints.CENTER;
        add(l6, gbc);

        gbc.gridx = 1;
        gbc.gridy = 7;
        gbc.anchor = GridBagConstraints.CENTER;
        add(l7, gbc);

        b.addActionListener(new ActionListener() {
            
            public void actionPerformed(ActionEvent e) {
                calculate();
            }
        });

       
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        buttonPanel.add(b);

        gbc.gridx = 1;
        gbc.gridy = 6;
        gbc.anchor = GridBagConstraints.CENTER;
        add(buttonPanel, gbc);
    }

    private void initializeComponents() {
        l1 = new JLabel("IA-1:");
        l2 = new JLabel("IA-2:");
        l3 = new JLabel("IA-3:");
        l4 = new JLabel("CTA:");
        l5 = new JLabel("SEE:");
        l6 = new JLabel("");
        l7 = new JLabel("");

        t1 = new JTextField(5);
        t2 = new JTextField(5);
        t3 = new JTextField(5);
        t4 = new JTextField(5);
        t5 = new JTextField(5);

        b = new JButton("Calculate");
    }

    private void calculate() {
        try {
            int ia1 = Integer.parseInt(t1.getText());
            int ia2 = Integer.parseInt(t2.getText());
            int ia3 = Integer.parseInt(t3.getText());
            int cta = Integer.parseInt(t4.getText());
            int see = Integer.parseInt(t5.getText());

            if (validateMarks(ia1, ia2, ia3, cta, see)) {
                if (isDetainedForIA(ia1, ia2, ia3, cta)) {
                    JOptionPane.showMessageDialog(this, "Student is detained for IA");
                    l6.setText("");
                    l7.setText("");
                } else {
                    int cie = calculateCIE(ia1, ia2, ia3, cta);
                    int totalMarks = calculateTotalMarks(cie, see);
                    String grade = calculateGrade(totalMarks);

                    l6.setText("Total Marks: " + totalMarks);
                    l7.setText("Grade: " + grade);

                    if (grade.equals("F")) {
                        if (see >= 0 && see < 38) {
                            JOptionPane.showMessageDialog(this, "Apply for Revaluation/Attend Makeup Exam");
                        } else if (see == 38 || see == 39) {
                            JOptionPane.showMessageDialog(this, "SEE marks upgraded to 40!");
                        }
                    }
                }
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid marks entered!");
        }
    }

    private boolean validateMarks(int ia1, int ia2, int ia3, int cta, int see) {
        if (ia1 < 0 || ia1 > 20 || ia2 < 0 || ia2 > 20 || ia3 < 0 || ia3 > 20 || cta < 0 || cta > 10 || see < 0 || see > 100) {
            JOptionPane.showMessageDialog(this, "Invalid marks entered!");
            return false;
        }

        return true;
    }

    private boolean isDetainedForIA(int ia1, int ia2, int ia3, int cta) {
        int totalIaCtaMarks = ia1 + ia2 + ia3 + cta;
        return totalIaCtaMarks < 20;
    }

    private int calculateCIE(int ia1, int ia2, int ia3, int cta) {
        int cie = ia1 + ia2 + ia3 + cta - Math.min(Math.min(ia1, ia2), ia3);
        return cie;
    }

    private int calculateTotalMarks(int cie, int see) {
        if (cie < 20) {
            JOptionPane.showMessageDialog(this, "Student is detained from taking SEE");
            return 0;
        }

        if (see == 38 || see == 39) {
            see = 40;
        }

        double totalMarks = (cie + see) / 2.0;
        totalMarks = Math.round(totalMarks);

        return (int) totalMarks;
    }

    private String calculateGrade(int totalMarks) {
        if (totalMarks >= 90 && totalMarks <= 100) {
            return "S";
        } else if (totalMarks >= 80 && totalMarks < 90) {
            return "A";
        } else if (totalMarks >= 70 && totalMarks < 80) {
            return "B";
        } else if (totalMarks >= 60 && totalMarks < 70) {
            return "C";
        } else if (totalMarks >= 50 && totalMarks < 60) {
            return "D";
        } else if (totalMarks >= 40 && totalMarks < 50) {
            return "E";
        } else {
            return "F";
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new Final().setVisible(true);
            }
        });
    }
}
